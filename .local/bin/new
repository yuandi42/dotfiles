#!/bin/sh

# Help me creat text file with certain template, and +x if I want.

# USAGE: new [options] [new file]
# Options:
#   -t filetype, or template, by default is none, no space is allowed here
#   -d template directory, by default is $XDG_DATA_HOME/templates
#   -x chmod +x after file is created
#   -f force to overwrite existing file
#   -h help message
#
# Supporting types (by default):
#   py/py3/python/python3: for .py
#   md/markdown: for .md
#   sh/*sh: respectively for POSIX shell, bash, zsh, and blabla...
#   make: for (GNU) make makefile
#   and you can set your own type/template in template directory
#
# Note:
#   1. type/template arguments as well as filename should have no space
#      character, or bugs occur. Follow the Unix-style, please!!!
#   2. if -t option isn't set, the script will auto detect filetype according
#      to: templates in teamplates dir, then filename extension.
#   3. if template_dir/template is executable for current user, the script will
#      run `. template_dir/template file`;
#      or it will run `cat template_dir/template > file`.

while getopts ":xft:d:h" opt; do
    case ${opt} in
        x) _NEW_EXEC=1;;
        f) _NEW_FORCE=1;;
        t) _NEW_TYPE="$OPTARG";;
        d) _NEW_TEMP_DIR="$OPTARG";;
        h) printf "Read the script yourself, that's not rocket science.\n" >&2 && exit 2;;
        ?) echo "Error: Invalid opt, type -h for help" >&2 && exit 2;;
    esac
done
shift $(($OPTIND - 1))

[ "$#" -eq 0 ] && echo "Error: No arg, type -h for help" >&2 && exit 2

[ -z $_NEW_TEMP_DIR ] && _NEW_TEMP_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/templates"
[ -d $_NEW_TEMP_DIR ] || echo "Templates directory isn't found. Use default templates."

files="$@"

type_detect(){
    if [ -d "$2" ] && [ -f "$2/$1" ]; then
        _NEW_TEMP_TYPE="$1"
    else
        case "$1" in
            *.*) _NEW_TEMP_TYPE="${1##*.}";;
            [Mm]akefile) _NEW_TEMP_TYPE="make";;
            *) _NEW_TEMP_TYPE="none"
        esac
    fi
    printf "$_NEW_TEMP_TYPE"
}

default_template_fill(){
    case "$1" in
        make) printf "all: clean build\n\nclean:\n\nbuild:\n\n" > "$2";;
        py|py3|python|python3) printf "#!/usr/bin/env python3\n\n" > "$2";;
        md|markdown) printf "# ${2%.*}\n\n##" > "$2";;
        [a-z]*sh|sh) printf "#!/bin/$1\n\n" > "$2";;
        *) printf "" > $2; printf " with no template applied"
    esac
}

template_fill(){
    if [ -d "$1" ] && [ -f "$1/$2" ]; then
        [ -x "$1/$2" ] && eval "$1/$2 $3" || cat "$1/$2" > "$3"
    else
        default_template_fill "$2" "$3"
    fi
}

for file in $files; do
    [ -z $_NEW_TYPE ] && _NEW_FILETYPE=$(type_detect "$file" "$_NEW_TEMP_DIR") || _NEW_FILETYPE="$_NEW_TYPE"

    # File will be created/overwritten if:
    #   1. File doesn't exist;
    #   2. -f option is set, file exists, and is neither a directory nor a symlink.
    #   3. Some unknown bugs occur.
    if [ ! -r "$file" -o ! -z $_NEW_FORCE ] && [ ! -d "$file" ] && [ ! -h "$file" ]; then
        printf "File $file is"
        [ -f "$file" ] && printf " overwritten" || printf " created"
        touch "$file"
        template_fill "$_NEW_TEMP_DIR" "$_NEW_FILETYPE" "$file"
        [ ! -z $_NEW_EXEC ] && chmod +x "$file" && printf " and executable"
    else
        printf "File/Directory/Symlink $file already exists!"
    fi
    printf "\n"

    [ -z "$_NEW_FILETYPE" ] || unset -v _NEW_FILETYPE
done
